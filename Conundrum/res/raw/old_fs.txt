precision mediump float;
varying vec3 v_Position;
varying vec2 v_Texture;
varying vec3 v_Normal;
varying vec4 v_Color;
uniform sampler2D u_Texture;
// принимаем координаты камеры
uniform vec3 u_Camera;
// принимаем координаты источника света
uniform vec3 u_LightPosition;

void main() {
	vec3 n_Normal = normalize(v_Normal);
	// вычисляем единичный вектор, указывающий из пикселя на
	// источник света
	vec3 lightvector = normalize(u_LightPosition - v_Position);
	// вычисляем единичный вектор, указывающий из пикселя на камеру
	vec3 lookvector = normalize(u_Camera - v_Position);
	// определяем яркость фонового освещения
	float ambient = 0.2;
	// определяем коэффициент диффузного освещения
	float k_diffuse = 0.8;
	// определяем коэффициент зеркального освещения
	float k_specular = 0.4;
	// вычисляем яркость диффузного освещения пикселя
	float diffuse = k_diffuse * max(dot(n_Normal, lightvector), 0.0);
	// вычисляем вектор отраженного луча света
	vec3 reflectvector = reflect(-lightvector, n_Normal);
	// вычисляем яркость зеркального освещения пикселя
	float specular = k_specular * pow( max(dot(lookvector,reflectvector),0.0), 40.0 );
	// определяем вектор белого цвета
	vec4 one = vec4(1.0,1.0,1.0,1.0);
	vec4 textureColor = texture2D(u_Texture, v_Texture);
	// вычисляем цвет пикселя
	//gl_FragColor = (ambient + diffuse + specular) * textureColor;
	gl_FragColor = (ambient + diffuse + specular) * v_Color;
	//gl_FragColor = (ambient + diffuse + specular) * one;
}